plugins {
	id 'org.springframework.boot' version '2.6.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'com.bmuschko.docker-spring-boot-application' version '7.3.0'
	id 'net.nemerosa.versioning' version '2.15.1'
	id 'org.cyclonedx.bom' version '1.7.2'
	id 'com.google.protobuf' version '0.9.1'
}

group = 'graphene'
version = '3.15'
sourceCompatibility = JavaVersion.VERSION_17
println 'build revision: '+versioning.info.full+versioning.info.dirty



repositories {
	mavenCentral()
	maven {
		url "https://cicd.ai4eu-dev.eu:7443/repository/maven-public/"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'ai4eu.common-dataservice:cmn-data-svc-client:3.2.0-ai4eu-v1'
	implementation 'org.acumos.acumos-nexus-client:acumos-nexus-client:2.2.1'
	implementation 'com.googlecode.json-simple:json-simple:1.1.1'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.2'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'org.apache.httpcomponents.client5:httpclient5:5.1.3'
	implementation 'io.fabric8:kubernetes-client:6.4.0'
	compileOnly 'org.projectlombok:lombok:1.18.26'
	annotationProcessor 'org.projectlombok:lombok:1.18.26'

	runtimeOnly 'io.grpc:grpc-netty-shaded:1.52.1'
	implementation 'io.grpc:grpc-protobuf:1.52.1'
	implementation 'io.grpc:grpc-stub:1.52.1'
	compileOnly 'org.apache.tomcat:annotations-api:6.0.53'

	testCompileOnly 'org.projectlombok:lombok:1.18.26'
	testCompileOnly("org.assertj:assertj-core:3.11.1")
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.0'

}

tasks.withType(JavaCompile) {
	options.deprecation = true
}

cyclonedxBom {
    destination = file("build")
    outputName = "SBOM"
    outputFormat = "json"
}

bootJar {
	manifest {
		attributes(
				'Built-By'       : System.properties['user.name'],
				'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
				'Build-Version'  : project.version,
				'Build-Commit' : versioning.info.full,
				'Created-By'     : "Gradle ${gradle.gradleVersion}",
				'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
				'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
		)
	}
}

task copyTask(type: Copy) {
	dependsOn bootJar
	from 'deploy'
	from "${buildDir}/libs"
	into 'build/docker'
}

tasks.named('test') {
	useJUnitPlatform()
}


import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

task createDockerfile(type: Dockerfile) {
	dependsOn copyTask
	from 'eclipse-temurin:17-jre'
	addFile "${project.name}-${project.version}.jar", "maven/${project.name}-${project.version}.jar"
}

def image_list = []

task createImage(type: DockerBuildImage) {
	dependsOn createDockerfile

	docker {
		springBootApplication {
			baseImage = 'eclipse-temurin:17-jre'
		}
	}

	if(System.properties['docker.push.registry']) {
		images.add("${System.properties['docker.push.registry']}/${project.group}/${project.name}:${project.version}")
	} else {
		images.add("${project.group}/${project.name}:${project.version}")
	}
	image_list = images
}

task pushImage(type: DockerPushImage) {
	dependsOn createImage
	images = image_list
	registryCredentials {
		username = System.properties['docker.username']
		password = System.properties['docker.password']
	}
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:3.21.7"
	}
	plugins {
		grpc {
			artifact = 'io.grpc:protoc-gen-grpc-java:1.52.1'
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}
}